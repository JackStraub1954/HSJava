package edu.uweo.javaintro.ball_world_app.take04;

import java.awt.event.ItemEvent;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;

/**
 * This class implements a control panel for a BallField.
 * @author Jack Straub
 * 
 * Adapted from code by Chua Hock-Chuan (ehchua@ntu.edu.sg).
 * 
 * @author Jack Straub
 * @see  <a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/J8a_GameIntro-BouncingBalls.html">
 *          The World Of Bouncing Balls
 *      </a>
 *      by Chua Hock-Chuan (ehchua@ntu.edu.sg)
 */
@SuppressWarnings("serial")
public class ControlPanel extends JPanel
{
    /** The BallField under control; provided via constructor */
    private final BallField ballField;
    
    /**
     * Constructor.
     * 
     * @param ballField ballField to be controlled
     */
    public ControlPanel( BallField ballField )
    {
        this.ballField = ballField;
        
        ////////////////////////////////////////////////////////////
        // Check box to pause/resume animation
        ////////////////////////////////////////////////////////////
//        add( new JLabel( "Pause" ) );
        JCheckBox   checkBox= new JCheckBox( "Pause", false );
        checkBox.addItemListener( e -> pauseAnimation( e ) );
        add( checkBox );
        
        
        ////////////////////////////////////////////////////////////
        // Slider to control ball speed
        ////////////////////////////////////////////////////////////
        add( new JLabel( "Speed" ) );
        // Determine the upper and lower bounds of the slider
        // that controls the speed of the ball.
        // TODO justify these values
        int minSpeed    = 2;
        int maxSpeed    = 20;
        int ballSpeed   = (int)ballField.getBall().getSpeed();
        int horizontal  = JSlider.HORIZONTAL;
        JSlider speed  = 
            new JSlider( horizontal, minSpeed, maxSpeed, ballSpeed );
        speed.addChangeListener( e -> changeSpeed( e ) );
        add( speed );
        
        ////////////////////////////////////////////////////////////
        // Slider to adjust ball radius
        ////////////////////////////////////////////////////////////
        add( new JLabel( "Radius" ) );
        // Determine the upper and lower bounds of the slider
        // that controls the radius of the ball.
        // TODO justify these values
        int	minRadius	= 10;
        int maxRadius   = 100; 	// in the original code this is determined by the
        int ballRadius  = (int)ballField.getBall().getBallRadius();
        JSlider radius  = 
            new JSlider( horizontal, minRadius, maxRadius, ballRadius );
        radius.addChangeListener( e -> changeRadius( e ) );
        add( radius );
 }
    
    /**
     * Pause/resume the animation as indicated by
     * the state of the <em>pause</em> check box.
     * The state of the <em>pause</em> check box
     * is determined by a given ItemEvent
     * (presumably obtained when the state
     * of the check box changed).
     * 
     * @param evt   the given ItemEvent
     */
    private void pauseAnimation( ItemEvent evt )
    {
        int     state       = evt.getStateChange();
        boolean isPaused    = state == ItemEvent.SELECTED;
        ballField.setPaused( isPaused );
    }

    /**
     * Change the speed of the ball using a given ChangeEvent
     * generated by a change of the speed slider.
     * 
     * @param evt	the given ChangeEvent
     */
    private void changeSpeed( ChangeEvent evt )
    {
    	Object	source	= evt.getSource();
    	if ( source instanceof JSlider )
    	{
    		JSlider	slider	= (JSlider)source;
    		// Don't adjust speed while slider is in motion
    		if ( !slider.getValueIsAdjusting() )
    		{
    			int	newSpeed	= slider.getValue();
    			ballField.getBall().setSpeed( newSpeed );
    		}
    	}
    }
    
    /**
     * Change the radius of the ball using a given ChangeEvent
     * generated by a change of the radius slider.
     * 
     * @param evt	the given ChangeEvent
     */
    private void changeRadius( ChangeEvent evt )
    {
    	Object	source	= evt.getSource();
    	if ( source instanceof JSlider )
    	{
    		JSlider	slider	= (JSlider)source;
    		// Don't adjust speed while slider is in motion
    		if ( !slider.getValueIsAdjusting() )
    		{
    			int	newRadius	= slider.getValue();
    			ballField.getBall().setBallRadius( newRadius );
    		}
    	}
    }
}
